# -*- coding: utf-8 -*-
"""IPL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gxC45-aQslAaDVZKbdkWbF6HXf23xdaN
"""

import pandas as pd

data=pd.read_csv('cricket_data.csv')
data

data.info()

data.describe()

print(data.isnull().sum())

numeric_cols = ['Year', 'Matches_Batted', 'Not_Outs', 'Runs_Scored', 'Highest_Score', 'Batting_Average', 'Balls_Faced', 'Batting_Strike_Rate', 'Centuries', 'Half_Centuries', 'Fours', 'Sixes', 'Catches_Taken', 'Stumpings', 'Matches_Bowled', 'Balls_Bowled', 'Runs_Conceded', 'Wickets_Taken', 'Best_Bowling_Match', 'Bowling_Average', 'Economy_Rate', 'Bowling_Strike_Rate', 'Four_Wicket_Hauls', 'Five_Wicket_Hauls']
data[numeric_cols] = data[numeric_cols].apply(pd.to_numeric, errors='coerce')
numeric_cols

# Select only numeric columns
numeric_columns = data.select_dtypes(include='number')

# Fill missing values in numeric columns with the mean of each column
numeric_columns.fillna(numeric_columns.mean(), inplace=True)

# Display the DataFrame with filled missing values
print(numeric_columns)

summary_stats = data.describe()
print("Summary Statistics:\n", summary_stats)

# Convert non-numeric columns to numeric ones if possible
numeric_data = data.apply(pd.to_numeric, errors='coerce')

# Compute correlation matrix
correlation_matrix = numeric_data.corr()

# Print correlation matrix
print("Correlation Matrix:\n", correlation_matrix)

# Step 4: Visualize Data
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 8))
sns.histplot(data=data, x='Runs_Scored', bins=10, kde=True)
plt.title('Distribution of Runs Scored')
plt.xlabel('Runs Scored')
plt.ylabel('Number of players')
plt.show()

# Step 5: Further Analysis
top_run_scorers = data.sort_values(by='Runs_Scored', ascending=False).head(10)
print("Top Run Scorers:\n", top_run_scorers)

top_wicket_takers = data.sort_values(by='Wickets_Taken', ascending=False).head(10)
print("Top Wicket Takers:\n", top_wicket_takers)

plt.figure(figsize=(12, 8))
sns.lineplot(data=data, x='Year', y='Runs_Scored')
plt.title('Trend of Runs Scored Over Years')
plt.xlabel('Year')
plt.ylabel('Runs Scored')
plt.show()

# Example: Histogram for Runs_Scored
import matplotlib.pyplot as plt
plt.hist(data['Runs_Scored'], bins=20)
plt.xlabel('Runs')
plt.ylabel('Frequency')
plt.title('Histogram of Runs Scored')
plt.show()

import matplotlib.pyplot as plt

# Plot the histogram and capture the output
counts, bins, patches = plt.hist(data['Runs_Scored'], bins=20, edgecolor='black')

# Add labels on top of each bar
for count, patch in zip(counts, patches):
    plt.text(patch.get_x() + patch.get_width() / 2, count, int(count),
             ha='center', va='bottom', fontsize=8)

# Labels and title
plt.xlabel('Runs')
plt.ylabel('Number of Players')
plt.title('Histogram of Runs Scored')

# Show the plot
plt.show()

# Example: Scatter plot between Batting_Average and Runs_Scored
plt.scatter(data['Batting_Average'], data['Runs_Scored'])
plt.xlabel('Batting Average')
plt.ylabel('Runs Scored')
plt.title('Scatter Plot of Batting Average vs. Runs Scored')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Exclude non-numeric columns before computing correlation
numeric_data = data.select_dtypes(include=['int', 'float'])

# Compute correlation matrix
correlation_matrix = numeric_data.corr()

# Create a heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation Matrix of IPL Data')
plt.show()

# Visualize Runs Scored distribution
plt.figure(figsize=(10, 6))
plt.hist(data['Runs_Scored'], bins=20, color='orange', edgecolor='black')
plt.xlabel('Runs Scored')
plt.ylabel('Players')
plt.title('Distribution of Runs Scored')
plt.show()

# Sort the DataFrame by 'Runs_Scored' column in descending order
data_sorted = data.sort_values(by='Runs_Scored', ascending=False)

# Select the top ten players with the highest runs scored
top_ten_players = data_sorted.head(10)

# Visualize Runs Scored by the top ten players
plt.figure(figsize=(12, 6))
plt.bar(top_ten_players['Player_Name'], top_ten_players['Runs_Scored'], color='skyblue')
plt.xlabel('Player Name')
plt.ylabel('Runs Scored')
plt.title('Top Ten Players by Runs Scored')
plt.xticks(rotation=45, ha='right')
plt.show()

# Convert 'Highest_Score' column to numeric type
data['Highest_Score'] = pd.to_numeric(data['Highest_Score'], errors='coerce')

# Sort the DataFrame by 'Highest_Score' column in descending order
data_sorted = data.sort_values(by='Highest_Score', ascending=False)

# Select the top ten players with the highest scores
top_ten_players = data_sorted.head(10)

# Visualize Highest Score by the top ten players
plt.figure(figsize=(12, 6))
plt.bar(top_ten_players['Player_Name'], top_ten_players['Highest_Score'], color='skyblue')
plt.xlabel('Player Name')
plt.ylabel('Highest Score')
plt.title('Top Ten Players by Highest Score')
plt.xticks(rotation=45, ha='right')
plt.show()

import matplotlib.pyplot as plt

# Convert 'Highest_Score' column to numeric type
data['Highest_Score'] = pd.to_numeric(data['Highest_Score'], errors='coerce')

# Sort the DataFrame by 'Highest_Score' column in descending order
data_sorted = data.sort_values(by='Highest_Score', ascending=False)

# Select the top ten players with the highest scores
top_ten_players = data_sorted.head(10)

# Visualize Highest Score by the top ten players
plt.figure(figsize=(12, 6))
bars = plt.bar(top_ten_players['Player_Name'], top_ten_players['Highest_Score'], color='skyblue')

# Add values on top of each bar
for bar in bars:
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(),
             int(bar.get_height()), ha='center', va='bottom', fontsize=10)

# Labels and title
plt.xlabel('Player Name')
plt.ylabel('Highest Score')
plt.title('Top Ten Players by Highest Score')
plt.xticks(rotation=45, ha='right')  # Rotate player names for better visibility

plt.show()

# Convert 'Half_Centuries' column to numeric type
data['Half_Centuries'] = pd.to_numeric(data['Half_Centuries'], errors='coerce')

# Sort the DataFrame by 'Half_Centuries' column in descending order
data_sorted = data.sort_values(by='Half_Centuries', ascending=False)

# Select the top ten players with the most half centuries
top_ten_players = data_sorted.head(10)
top_ten_players

# Visualize Half Centuries by the top ten players
plt.figure(figsize=(12, 6))
plt.bar(top_ten_players['Player_Name'], top_ten_players['Half_Centuries'], color='skyblue')
plt.xlabel('Player Name')
plt.ylabel('Half Centuries')
plt.title('Top Ten Players by Half Centuries')
plt.xticks(rotation=45, ha='right')
plt.show()

# Group the data by 'Player_Name' and count occurrences
player_appearances = data.groupby('Player_Name')['Year'].count().sort_values(ascending=False)

# Select the top ten players with the most appearances
top_ten_players = player_appearances.head(10)

# Visualize the top ten players with the most appearances
plt.figure(figsize=(12, 6))
plt.bar(top_ten_players.index, top_ten_players.values, color='skyblue')
plt.xlabel('Player Name')
plt.ylabel('Number of Appearances')
plt.title('Top Ten Players with Most Appearances')
plt.xticks(rotation=45, ha='right')  # Adjust rotation for better readability
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(data['Centuries'], data['Runs_Scored'], alpha=0.5, color='skyblue')
plt.xlabel('Centuries')
plt.ylabel('Runs Scored')
plt.title('Centuries vs. Runs Scored')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(data['Batting_Average'], data['Runs_Scored'], alpha=0.5, color='orange')
plt.xlabel('Batting Average')
plt.ylabel('Runs Scored')
plt.title('Batting Average vs. Runs Scored')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(data['Batting_Strike_Rate'], data['Runs_Scored'], alpha=0.5, color='green')
plt.xlabel('Batting Strike Rate')
plt.ylabel('Runs Scored')
plt.title('Batting Strike Rate vs. Runs Scored')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(data['Bowling_Average'], data['Wickets_Taken'], alpha=0.5, color='red')
plt.xlabel('Bowling Average')
plt.ylabel('Wickets Taken')
plt.title('Bowling Average vs. Wickets Taken')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(data['Economy_Rate'], data['Runs_Conceded'], alpha=0.5, color='purple')
plt.xlabel('Economy Rate')
plt.ylabel('Runs Conceded')
plt.title('Economy Rate vs. Runs Conceded')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(data['Catches_Taken'], data['Matches_Batted'], alpha=0.5, color='brown')
plt.xlabel('Catches Taken')
plt.ylabel('Matches Played')
plt.title('Catches Taken vs. Matches Played')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(data['Stumpings'], data['Matches_Batted'], alpha=0.5, color='cyan')
plt.xlabel('Stumpings')
plt.ylabel('Matches Played')
plt.title('Stumpings vs. Matches Played')
plt.show()

# Convert 'Fours' and 'Sixes' columns to numeric type
data['Fours'] = pd.to_numeric(data['Fours'], errors='coerce')
data['Sixes'] = pd.to_numeric(data['Sixes'], errors='coerce')

# Sort the DataFrame by 'Fours' column in descending order
data_sorted_fours = data.sort_values(by='Fours', ascending=False)

# Select the top ten players with the most fours
top_ten_players_fours = data_sorted_fours.head(10)

# Sort the DataFrame by 'Sixes' column in descending order
data_sorted_sixes = data.sort_values(by='Sixes', ascending=False)

# Select the top ten players with the most sixes
top_ten_players_sixes = data_sorted_sixes.head(10)

# Visualize Fours by the top ten players
plt.figure(figsize=(12, 6))
plt.bar(top_ten_players_fours['Player_Name'], top_ten_players_fours['Fours'], color='skyblue')
plt.xlabel('Player Name')
plt.ylabel('Fours')
plt.title('Top Ten Players by Fours')
plt.xticks(rotation=45, ha='right')
plt.show()

# Visualize Sixes by the top ten players
plt.figure(figsize=(12, 6))
plt.bar(top_ten_players_sixes['Player_Name'], top_ten_players_sixes['Sixes'], color='orange')
plt.xlabel('Player Name')
plt.ylabel('Sixes')
plt.title('Top Ten Players by Sixes')
plt.xticks(rotation=45, ha='right')
plt.show()

# Convert 'Centuries' column to numeric type
data['Centuries'] = pd.to_numeric(data['Centuries'], errors='coerce')

# Sort the DataFrame by 'Centuries' column in descending order
data_sorted = data.sort_values(by='Centuries', ascending=False)

# Select the top ten players with the most centuries
top_ten_players = data_sorted.head(10)

# Visualize Centuries by the top ten players
plt.figure(figsize=(12, 6))
plt.bar(top_ten_players['Player_Name'], top_ten_players['Centuries'], color='skyblue')
plt.xlabel('Player Name')
plt.ylabel('Centuries')
plt.title('Top Ten Players by Centuries')
plt.xticks(rotation=45, ha='right')
plt.show()

